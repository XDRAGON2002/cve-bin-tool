import os
import sqlite3

import requests


class ExploitChecker:

    DBPATH = os.path.join(os.path.expanduser("~"), ".cache", "cve-bin-tool", "cve.db")

    def __init__(self):
        self.exploits = []
        self.connection = None

    def open_connection_db(self):
        if self.connection is None:
            self.connection = sqlite3.connect(self.DBPATH)

    def close_connection_db(self):
        if self.connection:
            self.connection.close()
            self.connection = None

    def update_exploits(self):
        url = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"
        r = requests.get(url)
        data = r.json()
        # catalog_version = data["catalogVersion"]
        # cve_count = data["count"]
        cves = data["vulnerabilities"]
        exploit_list = []
        for cve in cves:
            exploit_list.append((cve["cveID"], cve["product"], cve["shortDescription"]))
        self.populate_exploit_db(exploit_list)

    def get_cache_exploits(self):
        get_exploits = """
        SELECT cve_number FROM cve_exploited
        """
        self.open_connection_db()
        cursor = self.connection.cursor()
        cursor.row_factory = lambda cursor, row: row[0]
        self.exploits = cursor.execute(get_exploits).fetchall()
        self.close_connection_db()

    def create_exploit_db(self):
        create_exploit_table = """
        CREATE TABLE IF NOT EXISTS cve_exploited (
            cve_number TEXT,
            product TEXT,
            description TEXT,
            PRIMARY KEY(cve_number)
        )
        """
        self.open_connection_db()
        cursor = self.connection.cursor()
        cursor.execute(create_exploit_table)
        self.connection.commit()
        self.close_connection_db()

    def populate_exploit_db(self, exploits):
        insert_exploit = """
        INSERT or REPLACE INTO cve_exploited (
            cve_number,
            product,
            description
        )
        VALUES (?,?,?)
        """
        self.open_connection_db()
        cursor = self.connection.cursor()
        cursor.executemany(insert_exploit, exploits)
        self.connection.commit()
        self.close_connection_db()

    def check_exploit(self, exploit):
        return exploit in self.exploits


if __name__ == "__main__":
    exploits = ExploitChecker()
    exploits.create_exploit_db()
    exploits.update_exploits()
    exploits.get_cache_exploits()
    exploit = "CVE-2020-8816"
    if exploits.check_exploit(exploit):
        print("EXPLOITED")
    else:
        print("NOT EXPLOITED")
