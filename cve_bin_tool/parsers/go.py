# Copyright (C) 2022 Intel Corporation
# SPDX-License-Identifier: GPL-3.0-or-later

from cve_bin_tool.parsers import Parser
from cve_bin_tool.util import ProductInfo, ScanInfo


class GoParser(Parser):
    def __init__(self, cve_db, logger):
        self.cve_db = cve_db
        self.logger = logger
        self.filename = ""

    def find_vendor(self, product, version):
        vendor_package_pair = self.cve_db.get_vendor_product_pairs(product)
        vendorlist: list[ScanInfo] = []
        if vendor_package_pair != []:
            # To handle multiple vendors, return all combinations of product/vendor mappings
            for v in vendor_package_pair:
                vendor = v["vendor"]
                file_path = self.filename
                self.logger.debug(f"{file_path} {product} {version} by {vendor}")
                vendorlist.append(
                    ScanInfo(ProductInfo(vendor, product, version), file_path)
                )
            return vendorlist if len(vendorlist) > 0 else None
        return None

    def run_checker(self, filename):
        self.filename = filename
        with open(self.filename) as fh:
            lines = fh.readlines()
            packages = False
            for line in lines:
                line = line.strip()
                if line == "require (":
                    packages = True
                    continue
                if line == ")":
                    packages = False
                    continue
                if packages:
                    product = line.split(" ")[0].split("/")[-1]
                    version = line.split(" ")[1][1:].split("-")[0].split("+")[0]
                    vendor = self.find_vendor(product, version)
                    if vendor is not None:
                        yield from vendor
            self.logger.debug(f"Done scanning file: {self.filename}")
